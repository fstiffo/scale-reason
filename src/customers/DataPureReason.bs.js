// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function parseCustomer(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number" || match.tag !== 2) {
    return Pervasives.failwith("Expected an object");
  } else {
    var json$1 = match[0];
    var match$1 = Js_dict.get(json$1, "id");
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.classify(Caml_option.valFromOption(match$1));
      tmp = typeof match$2 === "number" || match$2.tag !== 1 ? Pervasives.failwith("Field 'id' should be a number") : match$2[0] | 0;
    } else {
      tmp = Pervasives.failwith("Missing field: id");
    }
    var match$3 = Js_dict.get(json$1, "name");
    var tmp$1;
    if (match$3 !== undefined) {
      var match$4 = Js_json.classify(Caml_option.valFromOption(match$3));
      tmp$1 = typeof match$4 === "number" || match$4.tag ? Pervasives.failwith("Field 'name' should be a string") : match$4[0];
    } else {
      tmp$1 = Pervasives.failwith("Missing field: name");
    }
    var match$5 = Js_dict.get(json$1, "address");
    var tmp$2;
    if (match$5 !== undefined) {
      var match$6 = Js_json.classify(Caml_option.valFromOption(match$5));
      if (typeof match$6 === "number" || match$6.tag !== 2) {
        tmp$2 = Pervasives.failwith("Field 'address' should be a object");
      } else {
        var address = match$6[0];
        var match$7 = Js_dict.get(address, "street");
        var tmp$3;
        if (match$7 !== undefined) {
          var match$8 = Js_json.classify(Caml_option.valFromOption(match$7));
          tmp$3 = typeof match$8 === "number" || match$8.tag ? Pervasives.failwith("Field 'street' should be a string") : match$8[0];
        } else {
          tmp$3 = Pervasives.failwith("Missing field: street");
        }
        var match$9 = Js_dict.get(address, "city");
        var tmp$4;
        if (match$9 !== undefined) {
          var match$10 = Js_json.classify(Caml_option.valFromOption(match$9));
          tmp$4 = typeof match$10 === "number" || match$10.tag ? Pervasives.failwith("Field 'city' should be a string") : match$10[0];
        } else {
          tmp$4 = Pervasives.failwith("Missing field: city");
        }
        var match$11 = Js_dict.get(address, "state");
        var tmp$5;
        if (match$11 !== undefined) {
          var match$12 = Js_json.classify(Caml_option.valFromOption(match$11));
          tmp$5 = typeof match$12 === "number" || match$12.tag ? Pervasives.failwith("Field 'state' should be a string") : match$12[0];
        } else {
          tmp$5 = Pervasives.failwith("Missing field: state");
        }
        var match$13 = Js_dict.get(address, "zip");
        var tmp$6;
        if (match$13 !== undefined) {
          var match$14 = Js_json.classify(Caml_option.valFromOption(match$13));
          tmp$6 = typeof match$14 === "number" || match$14.tag ? Pervasives.failwith("Field 'zip' should be a string") : match$14[0];
        } else {
          tmp$6 = Pervasives.failwith("Missing field: zip");
        }
        tmp$2 = /* record */[
          /* street */tmp$3,
          /* city */tmp$4,
          /* state */tmp$5,
          /* zip */tmp$6
        ];
      }
    } else {
      tmp$2 = Pervasives.failwith("Missing field: address");
    }
    var match$15 = Js_dict.get(json$1, "phone");
    var tmp$7;
    if (match$15 !== undefined) {
      var match$16 = Js_json.classify(Caml_option.valFromOption(match$15));
      tmp$7 = typeof match$16 === "number" || match$16.tag ? Pervasives.failwith("Field 'phone' should be a string") : match$16[0];
    } else {
      tmp$7 = Pervasives.failwith("Missing field: phone");
    }
    var match$17 = Js_dict.get(json$1, "email");
    var tmp$8;
    if (match$17 !== undefined) {
      var match$18 = Js_json.classify(Caml_option.valFromOption(match$17));
      tmp$8 = typeof match$18 === "number" || match$18.tag ? Pervasives.failwith("Field 'email' should be a string") : match$18[0];
    } else {
      tmp$8 = Pervasives.failwith("Missing field: email");
    }
    return /* record */[
            /* id */tmp,
            /* name */tmp$1,
            /* address */tmp$2,
            /* phone */tmp$7,
            /* email */tmp$8
          ];
  }
}

function parseCustomers(json) {
  var match = Js_json.classify(json);
  if (typeof match === "number" || match.tag !== 3) {
    return Pervasives.failwith("Expected an array");
  } else {
    return Belt_Array.map(match[0], parseCustomer);
  }
}

function parse(string) {
  var json;
  try {
    json = JSON.parse(string);
  }
  catch (exn){
    json = Pervasives.failwith("Error parsing JSON string");
  }
  console.log(json);
  return parseCustomers(json);
}

function customerToJson(customer) {
  var id = customer[/* id */0];
  var name = customer[/* name */1];
  var street = customer[/* address */2][/* street */0];
  var city = customer[/* address */2][/* city */1];
  var state = customer[/* address */2][/* state */2];
  var zip = customer[/* address */2][/* zip */3];
  var phone = customer[/* phone */3];
  var email = customer[/* email */4];
  return "\n    {\n      \"id\": " + (String(id) + (",\n      \"name\": \"" + (String(name) + ("\",\n      \"address\": {\n        \"street\": \"" + (String(street) + ("\",\n        \"city\": \"" + (String(city) + ("\",\n        \"state\": \"" + (String(state) + ("\",\n        \"zip\": \"" + (String(zip) + ("\"\n      },\n      \"phone\": \"" + (String(phone) + ("\",\n      \"email\": \"" + (String(email) + "\"\n    }\n  ")))))))))))))));
}

function toJson(customers) {
  var __x = Belt_Array.reduce(Belt_Array.map(customers, customerToJson), "[", (function (acc, customer) {
          return acc + (customer + ",");
        }));
  var __x$1 = "]".split("/n");
  return __x.replace((/,$/), "") + __x$1.map((function (line) {
                  return line.trim();
                })).join("");
}

exports.parseCustomer = parseCustomer;
exports.parseCustomers = parseCustomers;
exports.parse = parse;
exports.customerToJson = customerToJson;
exports.toJson = toJson;
/* No side effect */
